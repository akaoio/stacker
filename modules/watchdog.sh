#!/bin/sh
# Module: watchdog
# Description: Hardware watchdog integration for ultimate system recovery
# Dependencies: core config
# Provides: hardware watchdog management, system recovery, timeout configuration

# Module metadata
STACKER_MODULE_NAME="watchdog"
STACKER_MODULE_VERSION="1.0.0"
STACKER_MODULE_DEPENDENCIES="core config"
STACKER_MODULE_LOADED=false

# Module initialization
watchdog_init() {
    STACKER_MODULE_LOADED=true
    stacker_debug "Watchdog module initialized"
    return 0
}

# Check if hardware watchdog is available
stacker_watchdog_available() {
    if [ -e /dev/watchdog ] || [ -e /dev/watchdog0 ]; then
        return 0
    fi
    return 1
}

# Get watchdog device path
stacker_get_watchdog_device() {
    if [ -e /dev/watchdog ]; then
        echo "/dev/watchdog"
    elif [ -e /dev/watchdog0 ]; then
        echo "/dev/watchdog0"
    else
        return 1
    fi
}

# Setup systemd watchdog integration
stacker_setup_systemd_watchdog() {
    service_name="$STACKER_TECH_NAME"
    timeout="${1:-60}"
    user_home="$(stacker_get_user_home)"
    systemd_dir="$user_home/.config/systemd/user"
    service_file="$systemd_dir/${service_name}.service"
    
    if ! stacker_watchdog_available; then
        stacker_warn "Hardware watchdog not available - skipping watchdog setup"
        return 1
    fi
    
    stacker_log "Configuring systemd watchdog integration (timeout: ${timeout}s)..."
    
    # Check if service file exists
    if [ ! -f "$service_file" ]; then
        stacker_error "Service file not found: $service_file"
        stacker_error "Run 'stacker service setup' first"
        return 1
    fi
    
    # Create backup of service file
    cp "$service_file" "$service_file.backup" || return 1
    
    # Add watchdog configuration to service file
    if grep -q "WatchdogSec=" "$service_file"; then
        # Update existing watchdog configuration
        sed -i "s/WatchdogSec=.*/WatchdogSec=${timeout}/" "$service_file"
    else
        # Add watchdog configuration after [Service] section
        sed -i "/^\[Service\]/a\\
WatchdogSec=${timeout}\\
Restart=always\\
RestartSec=10" "$service_file"
    fi
    
    # Add NotifyAccess if not present
    if ! grep -q "NotifyAccess=" "$service_file"; then
        sed -i "/^\[Service\]/a\\
NotifyAccess=main" "$service_file"
    fi
    
    # Reload systemd configuration
    systemctl --user daemon-reload || {
        stacker_error "Failed to reload systemd configuration"
        mv "$service_file.backup" "$service_file"
        return 1
    }
    
    stacker_log "Systemd watchdog configured successfully"
    stacker_log "  Timeout: ${timeout} seconds"
    stacker_log "  Device: $(stacker_get_watchdog_device)"
    stacker_log "  Restart: Service will restart if watchdog timeout occurs"
    
    return 0
}

# Enable hardware watchdog for system-level protection
stacker_enable_hardware_watchdog() {
    timeout="${1:-60}"
    watchdog_device
    
    if ! stacker_watchdog_available; then
        stacker_warn "Hardware watchdog not available"
        return 1
    fi
    
    watchdog_device="$(stacker_get_watchdog_device)"
    
    stacker_log "Enabling hardware watchdog protection..."
    stacker_log "  Device: $watchdog_device"
    stacker_log "  Timeout: ${timeout} seconds"
    
    # Check if we have permission to access watchdog device
    if [ ! -w "$watchdog_device" ]; then
        stacker_log "Adding user to appropriate groups for watchdog access..."
        
        # Try to add user to common watchdog groups
        user="$(stacker_get_user)"
        if getent group watchdog >/dev/null 2>&1; then
            if sudo -n usermod -a -G watchdog "$user" 2>/dev/null; then
                stacker_log "User added to watchdog group - reboot may be required"
            fi
        fi
    fi
    
    # Create watchdog configuration script
    watchdog_script="$STACKER_INSTALL_DIR/${STACKER_TECH_NAME}-watchdog"
    
    cat > "$watchdog_script" << EOF
#!/bin/sh
# Watchdog feeder script for $STACKER_TECH_NAME
# Automatically generated by Stacker framework

WATCHDOG_DEVICE="$watchdog_device"
WATCHDOG_TIMEOUT="$timeout"
SERVICE_NAME="$STACKER_TECH_NAME"
PID_FILE="$STACKER_STATE_DIR/watchdog.pid"

# Function to feed the watchdog
feed_watchdog() {
    if [ -w "\$WATCHDOG_DEVICE" ]; then
        echo > "\$WATCHDOG_DEVICE"
        return 0
    fi
    return 1
}

# Function to check service health
check_service_health() {
    # Check if main service is running
    if systemctl --user is-active "\$SERVICE_NAME" >/dev/null 2>&1; then
        return 0
    elif sudo systemctl is-active "\$SERVICE_NAME" >/dev/null 2>&1; then
        return 0
    fi
    return 1
}

# Main watchdog loop
main() {
    echo \$$ > "\$PID_FILE"
    
    while true; do
        if check_service_health; then
            if feed_watchdog; then
                logger "Watchdog fed successfully for \$SERVICE_NAME"
            else
                logger "Warning: Failed to feed watchdog for \$SERVICE_NAME"
            fi
        else
            logger "Warning: Service \$SERVICE_NAME not healthy - watchdog will trigger reset"
            # Don't feed watchdog - let it trigger system reset
            break
        fi
        
        # Sleep for half the timeout period to ensure regular feeding
        sleep \$((WATCHDOG_TIMEOUT / 2))
    done
}

case "\${1:-start}" in
    start)
        main &
        ;;
    stop)
        if [ -f "\$PID_FILE" ]; then
            kill "\$(cat "\$PID_FILE")" 2>/dev/null
            rm -f "\$PID_FILE"
        fi
        ;;
    status)
        if [ -f "\$PID_FILE" ] && kill -0 "\$(cat "\$PID_FILE")" 2>/dev/null; then
            echo "Watchdog feeder running (PID: \$(cat "\$PID_FILE"))"
        else
            echo "Watchdog feeder not running"
        fi
        ;;
esac
EOF
    
    chmod +x "$watchdog_script"
    
    stacker_log "Hardware watchdog script created: $watchdog_script"
    stacker_log "  Commands:"
    stacker_log "    Start:  $watchdog_script start"
    stacker_log "    Stop:   $watchdog_script stop"
    stacker_log "    Status: $watchdog_script status"
    
    return 0
}

# Get watchdog status and information
stacker_watchdog_status() {
    watchdog_device
    
    echo "🐕 Hardware Watchdog Status:"
    echo
    
    if stacker_watchdog_available; then
        watchdog_device="$(stacker_get_watchdog_device)"
        echo "  Device: $watchdog_device ✅"
        
        # Check device permissions
        if [ -r "$watchdog_device" ]; then
            echo "  Access: Readable ✅"
        else
            echo "  Access: No read permission ❌"
        fi
        
        if [ -w "$watchdog_device" ]; then
            echo "  Write:  Writable ✅"
        else
            echo "  Write:  No write permission ❌"
        fi
        
        # Check for kernel watchdog daemon
        if pgrep watchdogd >/dev/null 2>&1; then
            echo "  Kernel: watchdogd running ✅"
        else
            echo "  Kernel: watchdogd not found ❌"
        fi
        
        # Check interrupts for hardware info
        if grep -q watchdog /proc/interrupts 2>/dev/null; then
            echo "  Hardware: Interrupt registered ✅"
            grep watchdog /proc/interrupts | while read line; do
                echo "    $line"
            done
        fi
        
        # Check systemd watchdog configuration
        service_name="$STACKER_TECH_NAME"
        user_home="$(stacker_get_user_home)"
        service_file="$user_home/.config/systemd/user/${service_name}.service"
        
        if [ -f "$service_file" ]; then
            if grep -q "WatchdogSec=" "$service_file"; then
                timeout="$(grep "WatchdogSec=" "$service_file" | cut -d= -f2)"
                echo "  Systemd: Configured (${timeout}) ✅"
            else
                echo "  Systemd: Not configured ❌"
            fi
        else
            echo "  Systemd: Service file not found ❌"
        fi
        
        # Check our watchdog script
        watchdog_script="$STACKER_INSTALL_DIR/${STACKER_TECH_NAME}-watchdog"
        if [ -f "$watchdog_script" ]; then
            echo "  Script: Available ✅"
            if "$watchdog_script" status | grep -q "running"; then
                echo "  Feeder: Running ✅"
            else
                echo "  Feeder: Not running ❌"
            fi
        else
            echo "  Script: Not configured ❌"
        fi
        
    else
        echo "  Device: Not available ❌"
        echo "  Status: Hardware watchdog not supported"
    fi
    
    echo
}

# Remove watchdog configuration
stacker_disable_watchdog() {
    service_name="$STACKER_TECH_NAME"
    user_home="$(stacker_get_user_home)"
    service_file="$user_home/.config/systemd/user/${service_name}.service"
    watchdog_script="$STACKER_INSTALL_DIR/${STACKER_TECH_NAME}-watchdog"
    
    stacker_log "Disabling watchdog configuration..."
    
    # Stop watchdog feeder script if running
    if [ -f "$watchdog_script" ]; then
        "$watchdog_script" stop 2>/dev/null || true
        rm -f "$watchdog_script"
        stacker_log "Watchdog script removed"
    fi
    
    # Remove watchdog configuration from systemd service
    if [ -f "$service_file" ]; then
        if grep -q "WatchdogSec=" "$service_file"; then
            # Create backup
            cp "$service_file" "$service_file.backup"
            
            # Remove watchdog lines
            sed -i '/^WatchdogSec=/d' "$service_file"
            sed -i '/^NotifyAccess=main$/d' "$service_file"
            
            # Reload systemd
            systemctl --user daemon-reload
            stacker_log "Systemd watchdog configuration removed"
        fi
    fi
    
    stacker_log "Watchdog disabled successfully"
    return 0
}

# Test watchdog functionality
stacker_test_watchdog() {
    timeout="${1:-10}"
    
    if ! stacker_watchdog_available; then
        stacker_error "Hardware watchdog not available for testing"
        return 1
    fi
    
    stacker_log "Testing watchdog functionality (timeout: ${timeout}s)..."
    stacker_warn "WARNING: This test may cause system reboot if watchdog is active!"
    stacker_log "Press Ctrl+C within 5 seconds to abort..."
    
    sleep 5
    
    watchdog_device="$(stacker_get_watchdog_device)"
    
    stacker_log "Opening watchdog device: $watchdog_device"
    stacker_log "System will reboot in ${timeout} seconds unless test is completed"
    
    # Open watchdog device - this starts the countdown
    exec 3>"$watchdog_device" || {
        stacker_error "Failed to open watchdog device"
        return 1
    }
    
    # Feed the watchdog a few times
    count=0
    while [ $count -lt 3 ]; do
        echo > "$watchdog_device"
        stacker_log "Watchdog fed (iteration $((count + 1))/3)"
        sleep 2
        count=$((count + 1))
    done
    
    # Close the watchdog device to disable it
    exec 3>&-
    
    stacker_log "Watchdog test completed successfully"
    stacker_log "If you see this message, watchdog is working correctly"
    
    return 0
}

# Export public interface
watchdog_list_functions() {
    echo "stacker_watchdog_available stacker_get_watchdog_device"
    echo "stacker_setup_systemd_watchdog stacker_enable_hardware_watchdog"
    echo "stacker_watchdog_status stacker_disable_watchdog stacker_test_watchdog"
}